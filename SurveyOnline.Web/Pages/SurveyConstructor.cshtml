@page
@model SurveyConstructor
@using SurveyOnline.DAL.Entities.Enums
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    Layout = "Shared/_Layout";
}

<head>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2-bootstrap-5-theme/1.3.0/select2-bootstrap-5-theme.min.css" />
    <style>
        html[data-bs-theme="dark"] .select2-selection__choice__display,
        html[data-bs-theme="dark"] .select2-results__option,
        html[data-bs-theme="dark"] .select2-selection,
        html[data-bs-theme="dark"] .CodeMirror{
            background-color: #212529;
            color: #dee2e6;
        }
        html[data-bs-theme="dark"] .editor-preview {
            background: #212529;
        }
    </style>
</head>

<div class="container mt-5">
    <form method="post" enctype="multipart/form-data">
        <div class="card mb-4">
            <div class="card-header">
                <h2>@Localizer["Create Survey"]</h2>
            </div>
            <div class="card-body">
                <div class="form-group mb-3">
                    <label asp-for="Survey.Title" class="form-label">@Localizer["Title"]</label>
                    <input asp-for="Survey.Title" class="form-control" placeholder="@Localizer["Enter survey title"]" />
                    <span asp-validation-for="Survey.Title" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Survey.Description" class="form-label">@Localizer["Description"]</label>
                    <textarea asp-for="Survey.Description" id="markdown-editor" class="form-control" rows="5" placeholder="@Localizer["Enter description"]"></textarea>
                    <span asp-validation-for="Survey.Description" class="text-danger"></span>
                </div>
                
                <div class="form-group mb-3">
                    <label asp-for="Survey.TopicName" class="form-label">@Localizer["Topic"]</label>
                    <select asp-for="Survey.TopicName" class="form-select">
                        @foreach (var topic in Model.Topics)
                        {
                            <option value="@topic.Name">@topic.Name</option>
                        }
                    </select>
                    <span asp-validation-for="Survey.TopicName" class="text-danger"></span>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="Survey.IsPublic" class="form-check-input" id="isPublicCheckbox" />
                    <label asp-for="Survey.IsPublic" class="form-check-label">@Localizer["Is Public"]</label>
                </div>

                @if (!Model.Survey.IsPublic)
                {
                    <div class="form-group mb-3" id="select-users-container">
                        <label asp-for="SelectedUsers" class="form-label">@Localizer["Accessible Users"]</label>
                        <select asp-for="SelectedUsers" class="form-select" id="selectedUsers" name="SelectedUsers" multiple></select>
                    </div>
                }

                <div class="form-group mb-3">
                    <label asp-for="Survey.Image" class="form-label">@Localizer["Image"]</label>
                    <input asp-for="Survey.Image" type="file" class="form-control" accept=".jpg, .jpeg, .png" />
                    <span asp-validation-for="Survey.Image" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="SelectedTags" class="form-label">@Localizer["Selected Tags"]</label>
                    <select class="form-select tags-select" name="SelectedTags" multiple="multiple">
                        @foreach (var tag in Model.Tags)
                        {
                            <option value="@tag.Name" selected="@Model.SelectedTags.Contains(tag.Name)">@tag.Name</option>
                        }
                    </select>
                    <span asp-validation-for="SelectedTags" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h3>@Localizer["Questions"]</h3>
            </div>
            <div class="card-body">
                <div id="questions-container" class="mb-3">
                    @if (Model.Questions.Count > 0)
                    {
                        @for (var i = 0; i < Model.Questions.Count; i++)
                        {
                            <div class="form-group mb-3 question-item card p-3 border">
                                <label>@Localizer["Title"]</label>
                                <input class="form-control" type="text" asp-for="Questions[i].Title" value="@Model.Questions[i].Title" />
                
                                <label>@Localizer["Description"]</label>
                                <input class="form-control" type="text" asp-for="Questions[i].Description" value="@Model.Questions[i].Description" />
                
                                <label>@Localizer["Type"]</label>
                                <select class="form-select" asp-for="Questions[i].Type">
                                    @foreach (var type in Enum.GetNames(typeof(QuestionType)))
                                    {
                                        <option value="@type" selected="@(type == Model.Questions[i].Type.ToString())">@type</option>
                                    }
                                </select>
                
                                <div class="form-check">
                                    <input asp-for="Questions[i].IsVisible" class="form-check-input" type="checkbox" name="Questions[@i].IsVisible" checked="@(Model.Questions[i].IsVisible ? "checked" : null)" />
                                    <label class="form-check-label">@Localizer["Is Visible"]</label>
                                </div>
                                <button type="submit" class="btn btn-danger mt-2 remove-question" asp-page-handler="RemoveQuestion" name="questionIndex" value="@i">@Localizer["Remove Question"]</button>
                            </div>
                        }
                    }
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-success" asp-page-handler="SubmitForm">@Localizer["Submit"]</button>
                    <button type="submit" class="btn btn-primary" asp-page-handler="AddQuestion">@Localizer["Add Question"]</button>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/easymde/dist/easymde.min.js"></script>
    <script src="js/markdown-editor.js"></script>
    <script src="js/verificationToken.js"></script>
    <script>
        $(document).ready(function() {
            const questionsContainer = document.getElementById('questions-container');
            Sortable.create(questionsContainer, {
                animation: 150,
                handle: '.question-item',
                onEnd: function () {
                    updateQuestionIndices();
                    updateHiddenIndices();
                }
            });

            function updateQuestionIndices() {
                const questionItems = document.querySelectorAll('.question-item');
                questionItems.forEach((element, index) => {
                    element.setAttribute('data-index', index);
                });
            }
            
            function updateHiddenIndices() {
                const questionItems = document.querySelectorAll('.question-item');
                questionItems.forEach((element, index) => {
                    element.setAttribute('data-index', index);
                    
                    const inputs = element.querySelectorAll('input[name^="Questions["], select[name^="Questions["]');
                    inputs.forEach(input => {
                        const name = input.getAttribute('name');
                        const newName = name.replace(/Questions\[\d+]/, `Questions[${index}]`);
                        input.setAttribute('name', newName);
                    });
            
                    const removeButton = element.querySelector('.remove-question');
                    if (removeButton) {
                        removeButton.setAttribute('value', index);
                    }
                });
            }

            $('.tags-select').select2({
                theme: 'bootstrap-5',
                tags: true,
                tokenSeparators: [',', ' '],
                placeholder: 'Select tags'
            });

            $('#isPublicCheckbox').on('change', function() {
                const userSelectContainer = $('#select-users-container');
                userSelectContainer.toggle(!this.checked);
                if (!this.checked) initializeUserSelect();
            });

            async function initializeUserSelect() {
                const userSelect = $('#selectedUsers');
                userSelect.select2({
                    theme: 'bootstrap-5',
                    placeholder: 'Select users',
                    tokenSeparators: [',', ' '],
                    minimumInputLength: 1,
                    ajax: {
                        url: '@Url.Page(nameof(SurveyConstructor))?handler=SearchUsers',
                        type: 'POST',
                        headers: {
                            'RequestVerificationToken': getToken()
                        },
                        contentType: 'application/json',
                        dataType: 'json',
                        data: function (params) {
                            const query = params.term;
                            return JSON.stringify(query);
                        },
                        processResults: function(data) {
                            return {
                                results: data.map(user => ({
                                    id: user.id,
                                    text: `${user.userName} - ${user.email}`
                                }))
                            };
                        },
                        cache: true
                    }
                });
            }
           
            initializeUserSelect();
        });
    </script>
}
